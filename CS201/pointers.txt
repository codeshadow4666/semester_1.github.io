
............................Declaration...............................

int *ptr1, *ptr2, *ptr3 ;         correct 

int *ptr, x, a [10] ;               correct
............................Assigning Address..........................

 ptr = &x ;                  (& is Address operator)


 tips:
  A pointer can be initialized by assigning 
either value 0 or the word NULL. The NULL is a global variable
.......................................................................
Null pointer:
.......................................................................
 ptr = NULL; is called null pointer which 
points to nothing.

 Similarly, when we assign a zero to a pointer like ptr = 0; 
 it means that the pointer is pointing to nothing at the moment.
.......................................................................
..........................important Points.........................
........................................................................
.........................pointer incremented........................................
When a pointer is incremented, it actually jumps the number of memory spaces
according to it's data type;
Example:
 integer pointer will jump to 4 bytes after incremented by 1
 float:
  will take 8 bytes
  char:
  will take 1 byte
........................................................................
.........................Addition & Substraction........................
Addition:
         we can't add pointer address (error)
Substraction:
                Yes, we can.
Example:
     Suppose we have two pointers pointing to the same memory address. 
When we subtract these, the answer will be zero. Similarly, if a pointer is
pointing to the first element of an integer array while another pointer
pointing to the second element of the array. We can subtract the first
pointer from second one. Here the answer will be one, i.e. how many 
array elements are these two pointers apart


yptr1 = &y[0]; 
 yptr2 = &y[3]; 
 cout << “ The difference = “ << yptr2 - yptr1;                          

Output:The difference = 3
........................................................................
 Can we increment the yptr up to 12 times? 
 And what will happen? Obviously, we can increment it up to 12 times. 
 In this case, yptr will be pointing to some memory location 
 containing garbage
........................................................................
........................................................................
...................increment value & address..............................
When we want to increment the pointer address  to point next location then 
,we write as (yptr++); Use parenthesis when incrementing the address. 
If we want to increment the value where the pointer point's then 
it can be written as (*yptr) ++
........................................................................
........................................................................
........................................................................

........................................................................
CS201  page 154 is very important for const pointer
........................................................................
........................................................................
........................................................................

........................................................................
Lecture 15: Tips:
........................................................................
• While incrementing the pointers, use the parenthesis 
• Increment and decrement the pointers while using arrays 
• When a pointer is incremented or decremented, it changes the address 
  by the CS201 – Introduction to Programming   number of bytes occupied
  by the data type that the pointer points to 
• Use key word const with pointers to avoid unwanted changes 
• The name of array is a constant pointer. It cannot be reassigned
........................................................................
........................................................................\
........................................................................\
...............referance variable vs pointer...........................
........................................................................\

 int b=10;
 int &a=b;                 here a is referance variable contain the Address
 &a=c; error                            of b;Now, a cannot reassigned a new memory 
                            address
int b=10;
int *a=&b;   
a=&c;  ok          here, a is an pointer variable, unlike referance var
                         ,pointers can be reassigned a new memory address                                                            
........................................................................\
........................................................................\
.................2D Arrays & pointer ...................................\
........................................................................\
ptr = *multi; // ‘ptr’ is assigned the starting address of the first row 

                    this method work in 2d arrays 
........................................................................\
................1D Arrays.................................................\
ptr = multi; // ‘ptr’ is assigned the starting address of the first row 
                    this method work in 1d arrays 
........................................................................\
........................................................................\
                  lecture 16 tips 
........................................................................\
Tips 
........................................................................\
¾ Pointers and arrays are closely related in C. The array names can be used as 
pointers but only as constant pointers. 
¾ A function receiving a multi-dimensional array as a parameter must minimally 
define all dimensions except the leftmost one. 
¾ Each time a pointer is incremented, it points to the memory location of the next 
element of its base type but in case of
 two-dimensional array, if you add some CS201 – Introduction to Programming 

number in a two-dimensional array name, it will jump as many rows as the added 
number. 
¾ If the array is to be accessed in random order, then the pointer approach may not 
be better than array indexing. 
¾ The use of pointers may reduce the wastage of memory space. As discussed in this 
lecture if we store a set of character strings
 of different lengths in a twodimensional array, the memory space is wasted. 
¾ Pointers may be arrayed (stored in an array) like any other data type. 
¾ An array of pointers is the same as pointers to pointers. 
¾ Although, you can give your desired names to the command line parameters 
inside ‘main()’ function but ‘argc’ and ‘argv’ are conventionally used. 
........................................................................\
........................................................................\
........................................................................\